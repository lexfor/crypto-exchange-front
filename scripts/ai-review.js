#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * AI Code Review Pre-commit Script
 * This script captures staged changes and generates a comprehensive review request
 */

function getStagedFiles() {
  try {
    const output = execSync('git diff --cached --name-only', { encoding: 'utf8' });
    return output.trim().split('\n').filter(file => file.length > 0);
  } catch (error) {
    console.error('Error getting staged files:', error.message);
    return [];
  }
}

function getStagedDiff() {
  try {
    const output = execSync('git diff --cached', { encoding: 'utf8' });
    return output;
  } catch (error) {
    console.error('Error getting staged diff:', error.message);
    return '';
  }
}

function getProjectContext() {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  const readmePath = path.join(process.cwd(), 'README.md');
  
  let context = {
    projectName: 'Unknown',
    description: 'No description available',
    dependencies: {},
    scripts: {}
  };

  try {
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      context.projectName = packageJson.name || 'Unknown';
      context.description = packageJson.description || 'No description available';
      context.dependencies = packageJson.dependencies || {};
      context.scripts = packageJson.scripts || {};
    }
  } catch (error) {
    console.warn('Could not read package.json');
  }

  return context;
}

function generateReviewPrompt(stagedFiles, diff, context) {
  const timestamp = new Date().toISOString();
  
  return `# 🤖 AI Code Review Request
**Generated at:** ${timestamp}
**Project:** ${context.projectName}

## 📋 Summary
${context.description}

## 📁 Files Changed (${stagedFiles.length})
${stagedFiles.map(file => `- ${file}`).join('\n')}

## 🎯 Review Focus Areas
Please review the following aspects:

### 🔍 Code Quality
- [ ] Code follows TypeScript/React best practices
- [ ] Functions are well-structured and readable
- [ ] Variable naming is descriptive and consistent
- [ ] Error handling is appropriate

### 🏗️ Architecture & Design
- [ ] Component structure follows React patterns
- [ ] State management is appropriate
- [ ] Dependencies are properly managed
- [ ] Code follows SOLID principles

### 🔒 Security & Performance
- [ ] No security vulnerabilities
- [ ] Performance considerations addressed
- [ ] Memory leaks prevented
- [ ] Proper data validation

### 🧪 Testing & Maintainability
- [ ] Code is testable
- [ ] Breaking changes are documented
- [ ] Backward compatibility considered
- [ ] Documentation needs updates

## 📝 Code Changes

\`\`\`diff
${diff}
\`\`\`

## 🤔 Questions for Review
1. Are there any potential bugs or edge cases?
2. Can any code be simplified or optimized?
3. Are there missing error handling scenarios?
4. Does this code follow our project's conventions?
5. Are there any security concerns?
6. Should any additional tests be written?

## 📦 Project Dependencies
\`\`\`json
${JSON.stringify(context.dependencies, null, 2)}
\`\`\`

---
**Next Steps:**
1. Review the code changes above
2. Provide feedback on each focus area
3. Suggest improvements or approve the changes
4. If approved, the commit will proceed

*This review was automatically generated by the pre-commit hook system.*
`;
}

function main() {
  console.log('🔍 Starting AI Code Review Process...\n');

  const stagedFiles = getStagedFiles();
  
  if (stagedFiles.length === 0) {
    console.log('ℹ️  No staged files found. Skipping review.');
    process.exit(0);
  }

  console.log(`📁 Found ${stagedFiles.length} staged file(s):`);
  stagedFiles.forEach(file => console.log(`   - ${file}`));
  console.log('');

  const diff = getStagedDiff();
  const context = getProjectContext();
  
  const reviewPrompt = generateReviewPrompt(stagedFiles, diff, context);
  
  // Create reviews directory if it doesn't exist
  const reviewsDir = path.join(process.cwd(), 'reviews');
  if (!fs.existsSync(reviewsDir)) {
    fs.mkdirSync(reviewsDir);
  }
  
  // Save review to file
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reviewFile = path.join(reviewsDir, `review-${timestamp}.md`);
  fs.writeFileSync(reviewFile, reviewPrompt);
  
  console.log(`📝 Review request generated: ${reviewFile}`);
  console.log('');
  console.log('🤖 AI REVIEW PROMPT:');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log(reviewPrompt);
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('');
  console.log('🎯 Please copy the above prompt to your AI assistant for review.');
  console.log('');
  
  // Interactive prompt
  console.log('⏸️  COMMIT PAUSED FOR REVIEW');
  console.log('');
  
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question('✅ Have you completed the AI review? Type "yes" to proceed, "no" to cancel: ', (answer) => {
      const response = answer.toLowerCase().trim();
      if (response === 'yes' || response === 'y') {
        console.log('✅ Review completed. Proceeding with commit...');
        rl.close();
        resolve(0);
      } else {
        console.log('❌ Commit cancelled. Please address review feedback and try again.');
        rl.close();
        resolve(1);
      }
    });
  }).then(exitCode => process.exit(exitCode));
}

if (require.main === module) {
  main();
}

module.exports = { getStagedFiles, getStagedDiff, getProjectContext, generateReviewPrompt };
